[gd_scene load_steps=17 format=2]

[ext_resource path="res://scenes/main/SnakeCamera.gd" type="Script" id=1]
[ext_resource path="res://assets/game_over.png" type="Texture" id=2]
[ext_resource path="res://resources/snake.tres" type="Theme" id=3]
[ext_resource path="res://assets/audio/Pause.wav" type="AudioStream" id=4]
[ext_resource path="res://assets/audio/Powerup.wav" type="AudioStream" id=5]
[ext_resource path="res://assets/audio/Trampoline.wav" type="AudioStream" id=6]
[ext_resource path="res://scenes/main/Main.gd" type="Script" id=7]
[ext_resource path="res://assets/audio/951131_Raten-Toro.mp3" type="AudioStream" id=8]
[ext_resource path="res://assets/audio/1207031_FD---Paranoia-NGAIC.mp3" type="AudioStream" id=9]
[ext_resource path="res://scenes/EndOfTime.tscn" type="PackedScene" id=10]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec2 mouse;
uniform float time;

const int iterations = 1;
const float formuparam2 = 0.79;
const float volsteps = 7.0;
const float stepsize = 0.290;
const float zoom = 2.0;
const float tile = 0.850;
uniform float speed2 = 0.2;
 
const float brightness = 0.0015;
const float darkmatter = 0.100;
const float distfading = 0.560;
const float saturation = 0.90;


const float transverseSpeed = 1.0; //zoom;
const float cloud = 0.17;

 
float triangle(float x, float a) { 
	float output2 = 2.0*abs(  3.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;
	return output2;
}
 
float field(in vec3 p) {	
	float strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 373.11));
	float accum = 0.;
	float prev = 0.;
	float tw = 0.;	

	for (int i = 0; i < 6; ++i) {
		float mag = dot(p, p);
		p = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(-time*0.1 + 2.0), -1.1+0.3*cos(time*0.3));
		float w = exp(-float(i) / 7.);
		accum += w * exp(-strength * pow(abs(mag - prev), 2.3));
		tw += w;
		prev = mag;
	}
	return max(0., 5. * accum / tw - .7);
}

void fragment() {
    vec2 uv2 = 2. * FRAGCOORD.xy / vec2(512) - 1.;
	vec2 uvs = uv2 * vec2(512)  / 512.;
	
	//float time = TIME;
	float time2 = time;               
    float speed = -speed2;
    speed = .005 * cos(time2*0.02 + 3.1415926/4.0);          
	//speed = 0.0;	
    float formuparam = formuparam2;
	
    	//get coords and direction	
	vec2 uv = uvs;		       
	//mouse rotation
	float a_xz = 0.9;
	float a_yz = -.6;
	float a_xy = 0.9 + time*0.08;	
	
	mat2 rot_xz = mat2(vec2(cos(a_xz),sin(a_xz)),vec2(-sin(a_xz),cos(a_xz)));	
	mat2 rot_yz = mat2(vec2(cos(a_yz),sin(a_yz)),vec2(-sin(a_yz),cos(a_yz)));		
	mat2 rot_xy = mat2(vec2(cos(a_xy),sin(a_xy)),vec2(-sin(a_xy),cos(a_xy)));
	
	float v2 =1.0;	
	vec3 dir=vec3(uv*zoom,1.); 
	vec3 from=vec3(0.0, 0.0,0.0);                               
        from.x -= 2.0*(mouse.x-0.5);
        from.y -= 2.0*(mouse.y-0.5);

	vec3 forward = vec3(0.,0.,1.);   
	from.x += transverseSpeed*(1.0)*cos(0.01*time) + 0.001*time;
	from.y += transverseSpeed*(1.0)*sin(0.01*time) +0.001*time;
	from.z += 0.003*time;	
	
	dir.xy*=rot_xy;
	forward.xy *= rot_xy;
	dir.xz*=rot_xz;
	forward.xz *= rot_xz;	
	dir.yz*= rot_yz;
	forward.yz *= rot_yz;
	
	from.xy*=-1.0*rot_xy;
	from.xz*=rot_xz;
	from.yz*= rot_yz;
	 
	//zoom
	float zooom = (time2-3311.)*speed;
	from += forward* zooom;
	float sampleShift = mod( zooom, stepsize );
	 
	float zoffset = -sampleShift;
	sampleShift /= stepsize; // make from 0 to 1
	
	//volumetric rendering
	float s=0.24;
	float s3 = s + stepsize/2.0;
	vec3 v=vec3(0.);
	float t3 = 0.0;	
	
	vec3 backCol2 = vec3(0.);
	for (float r=0.0; r<volsteps; r++) {
		vec3 p2=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);
		vec3 p3=from+(s3+zoffset)*dir;// + vec3(0.,0.,zoffset);
		
		p2 = abs(vec3(tile)-mod(p2,vec3(tile*2.))); // tiling fold
		p3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold		
		// #ifdef cloud
		t3 = field(p3);
		
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) {
			p2=abs(p2)/dot(p2,p2)-formuparam; // the magic formula
			//p=abs(p)/max(dot(p,p),0.005)-formuparam; // another interesting way to reduce noise
			float D = abs(length(p2)-pa); // absolute sum of average change
			a += i > 7 ? min( 12., D) : D;
			pa=length(p2);
		}
		
		
		//float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		//if (r>3) fade*=1.-dm; // dark matter, don't render near
		// brightens stuff up a bit
		float s1 = s+zoffset;
		// need closed form expression for this, now that we shift samples
		float fade = pow(distfading,max(0.,float(r)-sampleShift));		
		//t3 += fade;		
		v+=fade;
	       	//backCol2 -= fade;

		// fade out samples as they approach the camera
		if( r == 0.0 )
			fade *= (1. - (sampleShift));
		// fade in samples as they approach from the distance
		if( r == volsteps-1.0 )
			fade *= sampleShift;
		v+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade; // coloring based on distance
		
		backCol2 += mix(.4, 1., v2) * vec3(1.8 * t3 * t3 * t3, 1.4 * t3 * t3, t3) * fade;

		
		s+=stepsize;
		s3 += stepsize;		
	}
		       
	v = mix(vec3(length(v)),v,saturation); //color adjust	

	vec4 forCol2 = vec4(v*.01,1.);	
	backCol2 *= cloud;	
	backCol2.b *= 1.8;
	backCol2.r *= 0.05;	
	
	backCol2.b = 0.5*mix(backCol2.g, backCol2.b, 0.8);
	backCol2.g = 0.0;
	backCol2.bg = mix(backCol2.gb, backCol2.bg, 0.5*(cos(time*0.01) + 1.0));	
	COLOR = forCol2 + vec4(backCol2, 1.0);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/mouse = null
shader_param/time = 1.0
shader_param/speed2 = 0.2

[sub_resource type="Shader" id=3]

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Animation" id=1]
resource_name = "KO"
length = 1.2
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 84, -0.25, 0, 0.25, 0, 84, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 172, -0.25, 0, 0.25, 0, 64, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.2 )
}

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:position:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 84, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:position:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 172, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[node name="Main" type="Node2D"]
script = ExtResource( 7 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 83, 56 )
current = true
zoom = Vector2( 0.57, 0.57 )
script = ExtResource( 1 )

[node name="Tween" type="Tween" parent="Camera2D"]

[node name="DarkMatter" type="ColorRect" parent="Camera2D"]
modulate = Color( 1, 1, 1, 0 )
show_behind_parent = true
material = SubResource( 6 )
margin_left = -387.0
margin_top = -285.0
margin_right = 370.0
margin_bottom = 260.0

[node name="EndOfTime" parent="Camera2D" instance=ExtResource( 10 )]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -450.0
margin_top = -450.0
margin_right = 450.0
margin_bottom = 450.0

[node name="Ui" type="CanvasLayer" parent="."]

[node name="ColorRect" type="ColorRect" parent="Ui"]
margin_top = -1.0
margin_right = 170.0
margin_bottom = 8.0
color = Color( 0.290196, 0.380392, 0, 1 )

[node name="MarginContainer" type="MarginContainer" parent="Ui"]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
theme = ExtResource( 3 )
custom_constants/margin_right = 1
custom_constants/margin_top = 1
custom_constants/margin_left = 1
custom_constants/margin_bottom = 1

[node name="VBoxContainer" type="VBoxContainer" parent="Ui/MarginContainer"]
margin_left = 1.0
margin_top = 1.0
margin_right = 167.0
margin_bottom = 113.0
custom_constants/separation = 0

[node name="HBoxContainer" type="HBoxContainer" parent="Ui/MarginContainer/VBoxContainer"]
margin_right = 166.0
margin_bottom = 5.0

[node name="Score2" type="Label" parent="Ui/MarginContainer/VBoxContainer/HBoxContainer"]
margin_right = 21.0
margin_bottom = 5.0
custom_colors/font_color = Color( 0.129412, 0.176471, 0.0901961, 1 )
text = "score:"

[node name="Score" type="Label" parent="Ui/MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 25.0
margin_right = 159.0
margin_bottom = 5.0
size_flags_horizontal = 3
custom_colors/font_color = Color( 0.129412, 0.176471, 0.0901961, 1 )
text = "0000"

[node name="StrangeLabel" type="Label" parent="Ui/MarginContainer/VBoxContainer/HBoxContainer"]
visible = false
margin_left = 94.0
margin_right = 159.0
margin_bottom = 5.0
size_flags_horizontal = 3
custom_colors/font_color = Color( 0.129412, 0.176471, 0.0901961, 1 )
text = "0"
align = 2

[node name="Control" type="Control" parent="Ui/MarginContainer/VBoxContainer/HBoxContainer"]
margin_left = 163.0
margin_right = 166.0
margin_bottom = 5.0
rect_min_size = Vector2( 3, 2 )

[node name="HSeparator" type="HSeparator" parent="Ui/MarginContainer/VBoxContainer"]
margin_top = 5.0
margin_right = 166.0
margin_bottom = 9.0

[node name="Panel" type="Panel" parent="Ui/MarginContainer/VBoxContainer"]
margin_top = 9.0
margin_right = 166.0
margin_bottom = 112.0
rect_clip_content = true
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="GameOver" type="Sprite" parent="Ui"]
position = Vector2( 84, 172 )
scale = Vector2( 2.0119, 2.00877 )
texture = ExtResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Ui/GameOver"]
anims/KO = SubResource( 1 )
anims/RESET = SubResource( 2 )

[node name="Label" type="Label" parent="Ui/GameOver"]
margin_left = -9.44379
margin_top = 11.9476
margin_right = 39.5562
margin_bottom = 25.9476
theme = ExtResource( 3 )
custom_colors/font_color = Color( 0.129412, 0.176471, 0.0901961, 1 )
text = "R: restart"

[node name="Map" type="Node2D" parent="."]

[node name="StepTimer" type="Timer" parent="."]
autostart = true

[node name="AppleSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -16.0

[node name="GameOverSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
volume_db = -16.0

[node name="StartSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = -16.0
autoplay = true

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
volume_db = -25.0
autoplay = true

[node name="Music2" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = -80.0
autoplay = true

[connection signal="timeout" from="StepTimer" to="." method="_on_StepTimer_timeout"]
